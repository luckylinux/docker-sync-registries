FROM localhost/container-registry-tools:debian-latest

# Use Cache (Keep downloaded Files)
# They are stored in the Cache directory, NOT in the final Container Image
RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

# Update Sources
# Install required Packages
RUN --mount=type=cache,mode=0777,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,mode=0777,target=/var/lib/apt,sharing=locked \
    apt-get update && \
    apt-get install --no-install-recommends -y python3 python3-pip python3-venv

# Define Application Path
ARG APP_PATH="/opt/app"

# Define venv Path
ARG VENV_PATH="/opt/venv"

# Create Directories
RUN mkdir -p "${APP_PATH}"

# Copy Sources
COPY app/ "${APP_PATH}"

# Change Directory and Copy requirements.txt
#WORKDIR "/opt"
#COPY requirements.txt requirements.txt

# Create Python venv
RUN python3 -m venv "${VENV_PATH}"

# Set PATH Variable to include venv
ENV PATH="${VENV_PATH}/bin:$PATH"

# Activate venv
RUN source "${VENV_PATH}/bin/activate"
#RUN sh -c ". ${VENV_PATH}/bin/activate"

# Install required Packages
RUN --mount=type=cache,mode=0777,target=/var/lib/pip,sharing=locked \
    pip install --cache-dir /var/lib/pip -r "${APP_PATH}/requirements.txt"

# Set PATH Variable to Include Application
ENV PATH="${APP_PATH}/bin:$PATH"

# Change Directory
WORKDIR "${APP_PATH}"

# Copy and Execute Script for Installation and Initialization of App
COPY docker-entrypoint.sh /opt/
RUN chmod +x /opt/docker-entrypoint.sh
ENTRYPOINT ["/opt/docker-entrypoint.sh"]
